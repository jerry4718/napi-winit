/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class ActivationToken {

}

export declare class ActiveEventLoop {
  createWindow(windowAttributes: WindowAttributes): Window
  availableMonitors(): Array<MonitorHandle>
  primaryMonitor(): MonitorHandle | null
  listenDeviceEvents(allowed: DeviceEvents): void
  systemTheme(): Theme | null
  setControlFlowPoll(): void
  setControlFlowWait(): void
  setControlFlowWaitUntil(millis: number): void
  controlFlow(): ControlFlow
  exit(): void
  exiting(): boolean
  ownedDisplayHandle(): OwnedDisplayHandle
}

export declare class Application {
  static withAsyncEnvRef(options: ApplicationOptions): Application
  static withSyncEnvRef(options: ApplicationOptions): Application
  static withAsyncRef(options: ApplicationOptions): Application
  static withSyncRef(options: ApplicationOptions): Application
  static withAsync(options: ApplicationOptions): Application
  static withSync(options: ApplicationOptions): Application
}

export declare class AsyncRequestSerial {

}

export declare class Cursor {
  static fromIcon(icon: CursorIcon): Cursor
  static fromCustom(custom: CustomCursor): Cursor
}

export declare class CustomCursor {
  static fromRgba(rgba: Uint8Array, width: number, height: number, hotspotX: number, hotspotY: number): CustomCursorSource
}

export declare class CustomCursorSource {

}

export declare class DeviceId {

}

export declare class EventLoop {
  constructor()
  runApp(app: Application): void
  runAppOnDemand(app: Application): void
  pumpAppEvents(millis: number, app: Application): PumpStatus
}

export declare class Icon {
  static fromRgba(rgba: Uint8Array, width: number, height: number): Icon
}

export declare class InnerSizeWriter {

}

export declare class KeyEvent {
  get physicalKey(): PhysicalKey
  get logicalKey(): Key
  get text(): string | null
  get location(): KeyLocation
  get state(): ElementState
  get repeat(): boolean
}

export declare class Modifiers {
  get state(): ModifiersState
}

export declare class ModifiersState {
  static all(): ModifiersState
  static empty(): ModifiersState
  isAll(): boolean
  isEmpty(): boolean
  hasShift(): boolean
  hasControl(): boolean
  hasAlt(): boolean
  hasSuper(): boolean
  toggleShift(): this
  toggleControl(): this
  toggleAlt(): this
  toggleSuper(): this
  insertShift(): this
  insertControl(): this
  insertAlt(): this
  insertSuper(): this
  removeShift(): this
  removeControl(): this
  removeAlt(): this
  removeSuper(): this
}

export declare class MonitorHandle {

}

export declare class OwnedDisplayHandle {

}

export declare class SoftSurface {
  constructor(window: Window)
  present(input: Uint32Array): void
}

export declare class ThreadPool {
  constructor(numThreads: number)
  static default(): ThreadPool
  static main(): ThreadPool
  execute(callback: () => (Promise<void> | void)): void
}

export declare class TimeDuration {
  t_secs: number
  t_nanos: number
}

export declare class Timeout {
  static fromMillis(millis: number): Timeout
  static fromMicros(micros: number): Timeout
  static fromNanos(nanos: number): Timeout
}

export declare class Touch {

}

export declare class UserPayload {

}

export declare class VideoModeHandle {

}

export declare class Window {
  static defaultAttributes(): WindowAttributes
  id(): WindowId
  scaleFactor(): number
  requestRedraw(): void
  prePresentNotify(): void
  resetDeadKeys(): void
  innerPosition(): Position
  outerPosition(): Position
  setOuterPosition(position: Position): void
  innerSize(): Size
  requestInnerSize(size: Size): Size | null
  outerSize(): Size
  setMinInnerSize(minSize?: Size | undefined | null): void
  setMaxInnerSize(minSize?: Size | undefined | null): void
  resizeIncrements(): Size | null
  setResizeIncrements(increments?: Size | undefined | null): void
  setTitle(title: string): void
  setTransparent(transparent: boolean): void
  setBlur(blur: boolean): void
  setVisible(visible: boolean): void
  isVisible(): boolean | null
  setResizable(resizable: boolean): void
  isResizable(): boolean
  setEnabledButtons(buttons: WindowButtons): void
  enabledButtons(): WindowButtons
  setMinimized(minimized: boolean): void
  isMinimized(): boolean | null
  setMaximized(maximized: boolean): void
  isMaximized(): boolean
  setFullscreen(fullscreen?: Fullscreen | undefined | null): void
  fullscreen(): Fullscreen | null
  setDecorations(decorations: boolean): void
  isDecorated(): boolean
  setWindowLevel(level: WindowLevel): void
  setWindowIcon(windowIcon?: Icon | undefined | null): void
  setImeCursorArea(position: Position, size: Size): void
  setImeAllowed(allowed: boolean): void
  setImePurpose(purpose: ImePurpose): void
  focusWindow(): void
  hasFocus(): boolean
  requestUserAttention(requestType?: UserAttentionType | undefined | null): void
  setTheme(theme?: Theme | undefined | null): void
  theme(): Theme | null
  setContentProtected(protected: boolean): void
  title(): string
  setCursor(cursor: Cursor): void
  setCursorPosition(position: Position): void
  setCursorGrab(mode: CursorGrabMode): void
  setCursorVisible(visible: boolean): void
  dragWindow(): void
  dragResizeWindow(direction: ResizeDirection): void
  showWindowMenu(position: Position): void
  setCursorHittest(hittest: boolean): void
  currentMonitor(): MonitorHandle | null
  availableMonitors(): Array<MonitorHandle>
  primaryMonitor(): MonitorHandle | null
  getSurfaceOptions(): SurfaceOptions
}

export declare class WindowAttributes {
  constructor()
  withInnerSize(size: Size): this
  withMinInnerSize(minSize: Size): this
  withMaxInnerSize(maxSize: Size): this
  withPosition(position: Position): this
  withResizable(resizable: boolean): this
  withEnabledButtons(buttons: WindowButtons): this
  withTitle(title: string): this
  withFullscreen(fullscreen?: Fullscreen | undefined | null): this
  withMaximized(maximized: boolean): this
  withVisible(visible: boolean): this
  withTransparent(transparent: boolean): this
  get transparent(): boolean
  withBlur(blur: boolean): this
  withDecorations(decorations: boolean): this
  withWindowLevel(level: WindowLevel): this
  withTheme(theme?: Theme | undefined | null): this
  withResizeIncrements(resizeIncrements: Size): this
  withContentProtected(protected: boolean): this
  withActive(active: boolean): this
  withCursor(cursor: Cursor): this
}

export declare class WindowButtons {
  static all(): WindowButtons
  static empty(): WindowButtons
  isAll(): boolean
  isEmpty(): boolean
  hasClose(): boolean
  hasMinimize(): boolean
  hasMaximize(): boolean
  toggleClose(): this
  toggleMinimize(): this
  toggleMaximize(): this
  insertClose(): this
  insertMinimize(): this
  insertMaximize(): this
  removeClose(): this
  removeMinimize(): this
  removeMaximize(): this
}

export declare class WindowId {

}

export interface ApplicationOptions {
  onNewEvents?: (eventLoop: ActiveEventLoop, cause: StartCause) => (void | Promise<void>)
  onResumed: (eventLoop: ActiveEventLoop) => (void | Promise<void>)
  onUserEvent?: (eventLoop: ActiveEventLoop, event: UserPayload) => (void | Promise<void>)
  onWindowEvent: (eventLoop: ActiveEventLoop, windowId: WindowId, event: WindowEvent) => (void | Promise<void>)
  onDeviceEvent?: (eventLoop: ActiveEventLoop, deviceId: DeviceId, event: DeviceEvent) => (void | Promise<void>)
  onAboutToWait?: (eventLoop: ActiveEventLoop) => (void | Promise<void>)
  onSuspended?: (eventLoop: ActiveEventLoop) => (void | Promise<void>)
  onExiting?: (eventLoop: ActiveEventLoop) => (void | Promise<void>)
  onMemoryWarning?: (eventLoop: ActiveEventLoop) => (void | Promise<void>)
}

export interface ApplicationOptionsRefAsync {
  onNewEvents?: (arg0: ActiveEventLoop, arg1: StartCause) => Promise<undefined> | null
  onResumed: (arg0: ActiveEventLoop) => Promise<undefined> | null
  onUserEvent?: (arg0: ActiveEventLoop, arg1: UserPayload) => Promise<undefined> | null
  onWindowEvent: (arg0: ActiveEventLoop, arg1: WindowId, arg2: WindowEvent) => Promise<undefined> | null
  onDeviceEvent?: (arg0: ActiveEventLoop, arg1: DeviceId, arg2: DeviceEvent) => Promise<undefined> | null
  onAboutToWait?: (arg0: ActiveEventLoop) => Promise<undefined> | null
  onSuspended?: (arg0: ActiveEventLoop) => Promise<undefined> | null
  onExiting?: (arg0: ActiveEventLoop) => Promise<undefined> | null
  onMemoryWarning?: (arg0: ActiveEventLoop) => Promise<undefined> | null
}

export interface ApplicationOptionsRefSync {
  onNewEvents?: (arg0: ActiveEventLoop, arg1: StartCause) => void
  onResumed: (arg0: ActiveEventLoop) => void
  onUserEvent?: (arg0: ActiveEventLoop, arg1: UserPayload) => void
  onWindowEvent: (arg0: ActiveEventLoop, arg1: WindowId, arg2: WindowEvent) => void
  onDeviceEvent?: (arg0: ActiveEventLoop, arg1: DeviceId, arg2: DeviceEvent) => void
  onAboutToWait?: (arg0: ActiveEventLoop) => void
  onSuspended?: (arg0: ActiveEventLoop) => void
  onExiting?: (arg0: ActiveEventLoop) => void
  onMemoryWarning?: (arg0: ActiveEventLoop) => void
}

export declare function asyncSleep(millis: number): Promise<unknown>

export type ControlFlow =
  | { type: 'Poll' }
  | { type: 'Wait' }
  | { type: 'WaitUntil', field0: TimeDuration }

export declare const enum CursorGrabMode {
  None = 'None',
  Confined = 'Confined',
  Locked = 'Locked'
}

export declare const enum CursorIcon {
  Default = 'Default',
  ContextMenu = 'ContextMenu',
  Help = 'Help',
  Pointer = 'Pointer',
  Progress = 'Progress',
  Wait = 'Wait',
  Cell = 'Cell',
  Crosshair = 'Crosshair',
  Text = 'Text',
  VerticalText = 'VerticalText',
  Alias = 'Alias',
  Copy = 'Copy',
  Move = 'Move',
  NoDrop = 'NoDrop',
  NotAllowed = 'NotAllowed',
  Grab = 'Grab',
  Grabbing = 'Grabbing',
  EResize = 'EResize',
  NResize = 'NResize',
  NeResize = 'NeResize',
  NwResize = 'NwResize',
  SResize = 'SResize',
  SeResize = 'SeResize',
  SwResize = 'SwResize',
  WResize = 'WResize',
  EwResize = 'EwResize',
  NsResize = 'NsResize',
  NeswResize = 'NeswResize',
  NwseResize = 'NwseResize',
  ColResize = 'ColResize',
  RowResize = 'RowResize',
  AllScroll = 'AllScroll',
  ZoomIn = 'ZoomIn',
  ZoomOut = 'ZoomOut'
}

export type DeviceEvent =
  | { type: 'Added' }
  | { type: 'Removed' }
  | { type: 'MouseMotion', delta: Position }
  | { type: 'MouseWheel', delta: MouseScrollDelta }
  | { type: 'Motion', axis: number, value: number }
  | { type: 'Button', button: number, state: ElementState }
  | { type: 'Key', raw: RawKeyEvent }

export declare const enum DeviceEvents {
  Always = 'Always',
  WhenFocused = 'WhenFocused',
  Never = 'Never'
}

export declare const enum ElementState {
  Pressed = 'Pressed',
  Released = 'Released'
}

export type Event =
  | { type: 'NewEvents', cause: StartCause }
  | { type: 'WindowEvent', windowId: WindowId, event: WindowEvent }
  | { type: 'DeviceEvent', deviceId: DeviceId, event: DeviceEvent }
  | { type: 'UserEvent', payload: UserPayload }
  | { type: 'Suspended' }
  | { type: 'Resumed' }
  | { type: 'AboutToWait' }
  | { type: 'LoopExiting' }
  | { type: 'MemoryWarning' }

export declare const enum Fullscreen {
  Exclusive = 0,
  Borderless = 1
}

export type Ime =
  | { type: 'Enabled' }
  | { type: 'Preedit', preedit: string, position?: Position }
  | { type: 'Commit', commit: string }
  | { type: 'Disabled' }

export declare const enum ImePurpose {
  Normal = 'Normal',
  Password = 'Password',
  Terminal = 'Terminal'
}

export type Key =
  | { type: 'Named', name: NamedKey }
  | { type: 'Character', ch: string }
  | { type: 'Unidentified', ch: NativeKey }
  | { type: 'Dead', ch?: string }

export declare const enum KeyCode {
  Backquote = 'Backquote',
  Backslash = 'Backslash',
  BracketLeft = 'BracketLeft',
  BracketRight = 'BracketRight',
  Comma = 'Comma',
  Digit0 = 'Digit0',
  Digit1 = 'Digit1',
  Digit2 = 'Digit2',
  Digit3 = 'Digit3',
  Digit4 = 'Digit4',
  Digit5 = 'Digit5',
  Digit6 = 'Digit6',
  Digit7 = 'Digit7',
  Digit8 = 'Digit8',
  Digit9 = 'Digit9',
  Equal = 'Equal',
  IntlBackslash = 'IntlBackslash',
  IntlRo = 'IntlRo',
  IntlYen = 'IntlYen',
  KeyA = 'KeyA',
  KeyB = 'KeyB',
  KeyC = 'KeyC',
  KeyD = 'KeyD',
  KeyE = 'KeyE',
  KeyF = 'KeyF',
  KeyG = 'KeyG',
  KeyH = 'KeyH',
  KeyI = 'KeyI',
  KeyJ = 'KeyJ',
  KeyK = 'KeyK',
  KeyL = 'KeyL',
  KeyM = 'KeyM',
  KeyN = 'KeyN',
  KeyO = 'KeyO',
  KeyP = 'KeyP',
  KeyQ = 'KeyQ',
  KeyR = 'KeyR',
  KeyS = 'KeyS',
  KeyT = 'KeyT',
  KeyU = 'KeyU',
  KeyV = 'KeyV',
  KeyW = 'KeyW',
  KeyX = 'KeyX',
  KeyY = 'KeyY',
  KeyZ = 'KeyZ',
  Minus = 'Minus',
  Period = 'Period',
  Quote = 'Quote',
  Semicolon = 'Semicolon',
  Slash = 'Slash',
  AltLeft = 'AltLeft',
  AltRight = 'AltRight',
  Backspace = 'Backspace',
  CapsLock = 'CapsLock',
  ContextMenu = 'ContextMenu',
  ControlLeft = 'ControlLeft',
  ControlRight = 'ControlRight',
  Enter = 'Enter',
  SuperLeft = 'SuperLeft',
  SuperRight = 'SuperRight',
  ShiftLeft = 'ShiftLeft',
  ShiftRight = 'ShiftRight',
  Space = 'Space',
  Tab = 'Tab',
  Convert = 'Convert',
  KanaMode = 'KanaMode',
  Lang1 = 'Lang1',
  Lang2 = 'Lang2',
  Lang3 = 'Lang3',
  Lang4 = 'Lang4',
  Lang5 = 'Lang5',
  NonConvert = 'NonConvert',
  Delete = 'Delete',
  End = 'End',
  Help = 'Help',
  Home = 'Home',
  Insert = 'Insert',
  PageDown = 'PageDown',
  PageUp = 'PageUp',
  ArrowDown = 'ArrowDown',
  ArrowLeft = 'ArrowLeft',
  ArrowRight = 'ArrowRight',
  ArrowUp = 'ArrowUp',
  NumLock = 'NumLock',
  Numpad0 = 'Numpad0',
  Numpad1 = 'Numpad1',
  Numpad2 = 'Numpad2',
  Numpad3 = 'Numpad3',
  Numpad4 = 'Numpad4',
  Numpad5 = 'Numpad5',
  Numpad6 = 'Numpad6',
  Numpad7 = 'Numpad7',
  Numpad8 = 'Numpad8',
  Numpad9 = 'Numpad9',
  NumpadAdd = 'NumpadAdd',
  NumpadBackspace = 'NumpadBackspace',
  NumpadClear = 'NumpadClear',
  NumpadClearEntry = 'NumpadClearEntry',
  NumpadComma = 'NumpadComma',
  NumpadDecimal = 'NumpadDecimal',
  NumpadDivide = 'NumpadDivide',
  NumpadEnter = 'NumpadEnter',
  NumpadEqual = 'NumpadEqual',
  NumpadHash = 'NumpadHash',
  NumpadMemoryAdd = 'NumpadMemoryAdd',
  NumpadMemoryClear = 'NumpadMemoryClear',
  NumpadMemoryRecall = 'NumpadMemoryRecall',
  NumpadMemoryStore = 'NumpadMemoryStore',
  NumpadMemorySubtract = 'NumpadMemorySubtract',
  NumpadMultiply = 'NumpadMultiply',
  NumpadParenLeft = 'NumpadParenLeft',
  NumpadParenRight = 'NumpadParenRight',
  NumpadStar = 'NumpadStar',
  NumpadSubtract = 'NumpadSubtract',
  Escape = 'Escape',
  Fn = 'Fn',
  FnLock = 'FnLock',
  PrintScreen = 'PrintScreen',
  ScrollLock = 'ScrollLock',
  Pause = 'Pause',
  BrowserBack = 'BrowserBack',
  BrowserFavorites = 'BrowserFavorites',
  BrowserForward = 'BrowserForward',
  BrowserHome = 'BrowserHome',
  BrowserRefresh = 'BrowserRefresh',
  BrowserSearch = 'BrowserSearch',
  BrowserStop = 'BrowserStop',
  Eject = 'Eject',
  LaunchApp1 = 'LaunchApp1',
  LaunchApp2 = 'LaunchApp2',
  LaunchMail = 'LaunchMail',
  MediaPlayPause = 'MediaPlayPause',
  MediaSelect = 'MediaSelect',
  MediaStop = 'MediaStop',
  MediaTrackNext = 'MediaTrackNext',
  MediaTrackPrevious = 'MediaTrackPrevious',
  Power = 'Power',
  Sleep = 'Sleep',
  AudioVolumeDown = 'AudioVolumeDown',
  AudioVolumeMute = 'AudioVolumeMute',
  AudioVolumeUp = 'AudioVolumeUp',
  WakeUp = 'WakeUp',
  Meta = 'Meta',
  Hyper = 'Hyper',
  Turbo = 'Turbo',
  Abort = 'Abort',
  Resume = 'Resume',
  Suspend = 'Suspend',
  Again = 'Again',
  Copy = 'Copy',
  Cut = 'Cut',
  Find = 'Find',
  Open = 'Open',
  Paste = 'Paste',
  Props = 'Props',
  Select = 'Select',
  Undo = 'Undo',
  Hiragana = 'Hiragana',
  Katakana = 'Katakana',
  F1 = 'F1',
  F2 = 'F2',
  F3 = 'F3',
  F4 = 'F4',
  F5 = 'F5',
  F6 = 'F6',
  F7 = 'F7',
  F8 = 'F8',
  F9 = 'F9',
  F10 = 'F10',
  F11 = 'F11',
  F12 = 'F12',
  F13 = 'F13',
  F14 = 'F14',
  F15 = 'F15',
  F16 = 'F16',
  F17 = 'F17',
  F18 = 'F18',
  F19 = 'F19',
  F20 = 'F20',
  F21 = 'F21',
  F22 = 'F22',
  F23 = 'F23',
  F24 = 'F24',
  F25 = 'F25',
  F26 = 'F26',
  F27 = 'F27',
  F28 = 'F28',
  F29 = 'F29',
  F30 = 'F30',
  F31 = 'F31',
  F32 = 'F32',
  F33 = 'F33',
  F34 = 'F34',
  F35 = 'F35'
}

export declare const enum KeyLocation {
  Standard = 'Standard',
  Left = 'Left',
  Right = 'Right',
  Numpad = 'Numpad'
}

export declare const enum ModifiersKeyState {
  Pressed = 'Pressed',
  Unknown = 'Unknown'
}

export type MouseButton =
  | { type: 'Left' }
  | { type: 'Right' }
  | { type: 'Middle' }
  | { type: 'Back' }
  | { type: 'Forward' }
  | { type: 'Other', field0: number }

export type MouseScrollDelta =
  | { type: 'LineDelta', x: number, y: number }
  | { type: 'PixelDelta', delta: Position }

export declare const enum NamedKey {
  Alt = 'Alt',
  AltGraph = 'AltGraph',
  CapsLock = 'CapsLock',
  Control = 'Control',
  Fn = 'Fn',
  FnLock = 'FnLock',
  NumLock = 'NumLock',
  ScrollLock = 'ScrollLock',
  Shift = 'Shift',
  Symbol = 'Symbol',
  SymbolLock = 'SymbolLock',
  Meta = 'Meta',
  Hyper = 'Hyper',
  Super = 'Super',
  Enter = 'Enter',
  Tab = 'Tab',
  Space = 'Space',
  ArrowDown = 'ArrowDown',
  ArrowLeft = 'ArrowLeft',
  ArrowRight = 'ArrowRight',
  ArrowUp = 'ArrowUp',
  End = 'End',
  Home = 'Home',
  PageDown = 'PageDown',
  PageUp = 'PageUp',
  Backspace = 'Backspace',
  Clear = 'Clear',
  Copy = 'Copy',
  CrSel = 'CrSel',
  Cut = 'Cut',
  Delete = 'Delete',
  EraseEof = 'EraseEof',
  ExSel = 'ExSel',
  Insert = 'Insert',
  Paste = 'Paste',
  Redo = 'Redo',
  Undo = 'Undo',
  Accept = 'Accept',
  Again = 'Again',
  Attn = 'Attn',
  Cancel = 'Cancel',
  ContextMenu = 'ContextMenu',
  Escape = 'Escape',
  Execute = 'Execute',
  Find = 'Find',
  Help = 'Help',
  Pause = 'Pause',
  Play = 'Play',
  Props = 'Props',
  Select = 'Select',
  ZoomIn = 'ZoomIn',
  ZoomOut = 'ZoomOut',
  BrightnessDown = 'BrightnessDown',
  BrightnessUp = 'BrightnessUp',
  Eject = 'Eject',
  LogOff = 'LogOff',
  Power = 'Power',
  PowerOff = 'PowerOff',
  PrintScreen = 'PrintScreen',
  Hibernate = 'Hibernate',
  Standby = 'Standby',
  WakeUp = 'WakeUp',
  AllCandidates = 'AllCandidates',
  Alphanumeric = 'Alphanumeric',
  CodeInput = 'CodeInput',
  Compose = 'Compose',
  Convert = 'Convert',
  FinalMode = 'FinalMode',
  GroupFirst = 'GroupFirst',
  GroupLast = 'GroupLast',
  GroupNext = 'GroupNext',
  GroupPrevious = 'GroupPrevious',
  ModeChange = 'ModeChange',
  NextCandidate = 'NextCandidate',
  NonConvert = 'NonConvert',
  PreviousCandidate = 'PreviousCandidate',
  Process = 'Process',
  SingleCandidate = 'SingleCandidate',
  HangulMode = 'HangulMode',
  HanjaMode = 'HanjaMode',
  JunjaMode = 'JunjaMode',
  Eisu = 'Eisu',
  Hankaku = 'Hankaku',
  Hiragana = 'Hiragana',
  HiraganaKatakana = 'HiraganaKatakana',
  KanaMode = 'KanaMode',
  KanjiMode = 'KanjiMode',
  Katakana = 'Katakana',
  Romaji = 'Romaji',
  Zenkaku = 'Zenkaku',
  ZenkakuHankaku = 'ZenkakuHankaku',
  Soft1 = 'Soft1',
  Soft2 = 'Soft2',
  Soft3 = 'Soft3',
  Soft4 = 'Soft4',
  ChannelDown = 'ChannelDown',
  ChannelUp = 'ChannelUp',
  Close = 'Close',
  MailForward = 'MailForward',
  MailReply = 'MailReply',
  MailSend = 'MailSend',
  MediaClose = 'MediaClose',
  MediaFastForward = 'MediaFastForward',
  MediaPause = 'MediaPause',
  MediaPlay = 'MediaPlay',
  MediaPlayPause = 'MediaPlayPause',
  MediaRecord = 'MediaRecord',
  MediaRewind = 'MediaRewind',
  MediaStop = 'MediaStop',
  MediaTrackNext = 'MediaTrackNext',
  MediaTrackPrevious = 'MediaTrackPrevious',
  New = 'New',
  Open = 'Open',
  Print = 'Print',
  Save = 'Save',
  SpellCheck = 'SpellCheck',
  Key11 = 'Key11',
  Key12 = 'Key12',
  AudioBalanceLeft = 'AudioBalanceLeft',
  AudioBalanceRight = 'AudioBalanceRight',
  AudioBassBoostDown = 'AudioBassBoostDown',
  AudioBassBoostToggle = 'AudioBassBoostToggle',
  AudioBassBoostUp = 'AudioBassBoostUp',
  AudioFaderFront = 'AudioFaderFront',
  AudioFaderRear = 'AudioFaderRear',
  AudioSurroundModeNext = 'AudioSurroundModeNext',
  AudioTrebleDown = 'AudioTrebleDown',
  AudioTrebleUp = 'AudioTrebleUp',
  AudioVolumeDown = 'AudioVolumeDown',
  AudioVolumeUp = 'AudioVolumeUp',
  AudioVolumeMute = 'AudioVolumeMute',
  MicrophoneToggle = 'MicrophoneToggle',
  MicrophoneVolumeDown = 'MicrophoneVolumeDown',
  MicrophoneVolumeUp = 'MicrophoneVolumeUp',
  MicrophoneVolumeMute = 'MicrophoneVolumeMute',
  SpeechCorrectionList = 'SpeechCorrectionList',
  SpeechInputToggle = 'SpeechInputToggle',
  LaunchApplication1 = 'LaunchApplication1',
  LaunchApplication2 = 'LaunchApplication2',
  LaunchCalendar = 'LaunchCalendar',
  LaunchContacts = 'LaunchContacts',
  LaunchMail = 'LaunchMail',
  LaunchMediaPlayer = 'LaunchMediaPlayer',
  LaunchMusicPlayer = 'LaunchMusicPlayer',
  LaunchPhone = 'LaunchPhone',
  LaunchScreenSaver = 'LaunchScreenSaver',
  LaunchSpreadsheet = 'LaunchSpreadsheet',
  LaunchWebBrowser = 'LaunchWebBrowser',
  LaunchWebCam = 'LaunchWebCam',
  LaunchWordProcessor = 'LaunchWordProcessor',
  BrowserBack = 'BrowserBack',
  BrowserFavorites = 'BrowserFavorites',
  BrowserForward = 'BrowserForward',
  BrowserHome = 'BrowserHome',
  BrowserRefresh = 'BrowserRefresh',
  BrowserSearch = 'BrowserSearch',
  BrowserStop = 'BrowserStop',
  AppSwitch = 'AppSwitch',
  Call = 'Call',
  Camera = 'Camera',
  CameraFocus = 'CameraFocus',
  EndCall = 'EndCall',
  GoBack = 'GoBack',
  GoHome = 'GoHome',
  HeadsetHook = 'HeadsetHook',
  LastNumberRedial = 'LastNumberRedial',
  Notification = 'Notification',
  MannerMode = 'MannerMode',
  VoiceDial = 'VoiceDial',
  TV = 'TV',
  TV3DMode = 'TV3DMode',
  TVAntennaCable = 'TVAntennaCable',
  TVAudioDescription = 'TVAudioDescription',
  TVAudioDescriptionMixDown = 'TVAudioDescriptionMixDown',
  TVAudioDescriptionMixUp = 'TVAudioDescriptionMixUp',
  TVContentsMenu = 'TVContentsMenu',
  TVDataService = 'TVDataService',
  TVInput = 'TVInput',
  TVInputComponent1 = 'TVInputComponent1',
  TVInputComponent2 = 'TVInputComponent2',
  TVInputComposite1 = 'TVInputComposite1',
  TVInputComposite2 = 'TVInputComposite2',
  TVInputHDMI1 = 'TVInputHDMI1',
  TVInputHDMI2 = 'TVInputHDMI2',
  TVInputHDMI3 = 'TVInputHDMI3',
  TVInputHDMI4 = 'TVInputHDMI4',
  TVInputVGA1 = 'TVInputVGA1',
  TVMediaContext = 'TVMediaContext',
  TVNetwork = 'TVNetwork',
  TVNumberEntry = 'TVNumberEntry',
  TVPower = 'TVPower',
  TVRadioService = 'TVRadioService',
  TVSatellite = 'TVSatellite',
  TVSatelliteBS = 'TVSatelliteBS',
  TVSatelliteCS = 'TVSatelliteCS',
  TVSatelliteToggle = 'TVSatelliteToggle',
  TVTerrestrialAnalog = 'TVTerrestrialAnalog',
  TVTerrestrialDigital = 'TVTerrestrialDigital',
  TVTimer = 'TVTimer',
  AVRInput = 'AVRInput',
  AVRPower = 'AVRPower',
  ColorF0Red = 'ColorF0Red',
  ColorF1Green = 'ColorF1Green',
  ColorF2Yellow = 'ColorF2Yellow',
  ColorF3Blue = 'ColorF3Blue',
  ColorF4Grey = 'ColorF4Grey',
  ColorF5Brown = 'ColorF5Brown',
  ClosedCaptionToggle = 'ClosedCaptionToggle',
  Dimmer = 'Dimmer',
  DisplaySwap = 'DisplaySwap',
  DVR = 'DVR',
  Exit = 'Exit',
  FavoriteClear0 = 'FavoriteClear0',
  FavoriteClear1 = 'FavoriteClear1',
  FavoriteClear2 = 'FavoriteClear2',
  FavoriteClear3 = 'FavoriteClear3',
  FavoriteRecall0 = 'FavoriteRecall0',
  FavoriteRecall1 = 'FavoriteRecall1',
  FavoriteRecall2 = 'FavoriteRecall2',
  FavoriteRecall3 = 'FavoriteRecall3',
  FavoriteStore0 = 'FavoriteStore0',
  FavoriteStore1 = 'FavoriteStore1',
  FavoriteStore2 = 'FavoriteStore2',
  FavoriteStore3 = 'FavoriteStore3',
  Guide = 'Guide',
  GuideNextDay = 'GuideNextDay',
  GuidePreviousDay = 'GuidePreviousDay',
  Info = 'Info',
  InstantReplay = 'InstantReplay',
  Link = 'Link',
  ListProgram = 'ListProgram',
  LiveContent = 'LiveContent',
  Lock = 'Lock',
  MediaApps = 'MediaApps',
  MediaAudioTrack = 'MediaAudioTrack',
  MediaLast = 'MediaLast',
  MediaSkipBackward = 'MediaSkipBackward',
  MediaSkipForward = 'MediaSkipForward',
  MediaStepBackward = 'MediaStepBackward',
  MediaStepForward = 'MediaStepForward',
  MediaTopMenu = 'MediaTopMenu',
  NavigateIn = 'NavigateIn',
  NavigateNext = 'NavigateNext',
  NavigateOut = 'NavigateOut',
  NavigatePrevious = 'NavigatePrevious',
  NextFavoriteChannel = 'NextFavoriteChannel',
  NextUserProfile = 'NextUserProfile',
  OnDemand = 'OnDemand',
  Pairing = 'Pairing',
  PinPDown = 'PinPDown',
  PinPMove = 'PinPMove',
  PinPToggle = 'PinPToggle',
  PinPUp = 'PinPUp',
  PlaySpeedDown = 'PlaySpeedDown',
  PlaySpeedReset = 'PlaySpeedReset',
  PlaySpeedUp = 'PlaySpeedUp',
  RandomToggle = 'RandomToggle',
  RcLowBattery = 'RcLowBattery',
  RecordSpeedNext = 'RecordSpeedNext',
  RfBypass = 'RfBypass',
  ScanChannelsToggle = 'ScanChannelsToggle',
  ScreenModeNext = 'ScreenModeNext',
  Settings = 'Settings',
  SplitScreenToggle = 'SplitScreenToggle',
  STBInput = 'STBInput',
  STBPower = 'STBPower',
  Subtitle = 'Subtitle',
  Teletext = 'Teletext',
  VideoModeNext = 'VideoModeNext',
  Wink = 'Wink',
  ZoomToggle = 'ZoomToggle',
  F1 = 'F1',
  F2 = 'F2',
  F3 = 'F3',
  F4 = 'F4',
  F5 = 'F5',
  F6 = 'F6',
  F7 = 'F7',
  F8 = 'F8',
  F9 = 'F9',
  F10 = 'F10',
  F11 = 'F11',
  F12 = 'F12',
  F13 = 'F13',
  F14 = 'F14',
  F15 = 'F15',
  F16 = 'F16',
  F17 = 'F17',
  F18 = 'F18',
  F19 = 'F19',
  F20 = 'F20',
  F21 = 'F21',
  F22 = 'F22',
  F23 = 'F23',
  F24 = 'F24',
  F25 = 'F25',
  F26 = 'F26',
  F27 = 'F27',
  F28 = 'F28',
  F29 = 'F29',
  F30 = 'F30',
  F31 = 'F31',
  F32 = 'F32',
  F33 = 'F33',
  F34 = 'F34',
  F35 = 'F35'
}

export type NativeKey =
  | { type: 'Unidentified' }
  | { type: 'Android', code: number }
  | { type: 'MacOS', code: number }
  | { type: 'Windows', code: number }
  | { type: 'Xkb', code: number }
  | { type: 'Web', code: string }

export type NativeKeyCode =
  | { type: 'Unidentified' }
  | { type: 'Android', code: number }
  | { type: 'MacOS', code: number }
  | { type: 'Windows', code: number }
  | { type: 'Xkb', code: number }

export type PhysicalKey =
  | { type: 'Code', field0: KeyCode }
  | { type: 'Unidentified', field0: NativeKeyCode }

export type PixelUnit =
  | { type: 'Physical', count: number }
  | { type: 'Logical', count: number }

export type Position =
  | { type: 'Physical', x: number, y: number }
  | { type: 'Logical', x: number, y: number }

export type PumpStatus =
  | { type: 'Continue' }
  | { type: 'Exit', code: number }

export interface RawKeyEvent {
  physicalKey: PhysicalKey
  state: ElementState
}

export declare const enum ResizeDirection {
  East = 'East',
  North = 'North',
  NorthEast = 'NorthEast',
  NorthWest = 'NorthWest',
  South = 'South',
  SouthEast = 'SouthEast',
  SouthWest = 'SouthWest',
  West = 'West'
}

export type Size =
  | { type: 'Physical', width: number, height: number }
  | { type: 'Logical', width: number, height: number }

export type StartCause =
  | { type: 'ResumeTimeReached', start: TimeDuration, requestedResume: TimeDuration }
  | { type: 'WaitCancelled', start: TimeDuration, requestedResume?: TimeDuration }
  | { type: 'Poll' }
  | { type: 'Init' }

export interface SurfaceOptions {
  system: SurfaceSystem
  windowHandle: bigint
  displayHandle: bigint
}

export declare const enum SurfaceSystem {
  Win32 = 'win32',
  Cocoa = 'cocoa',
  X11 = 'x11',
  Wayland = 'wayland'
}

export declare const enum Theme {
  Light = 'Light',
  Dark = 'Dark'
}

export declare function tokioCallSpawn(callback: () => void): void

export declare function tokioInterval(timeout: Timeout, exec: () => (Promise<void> | void)): void

export declare function tokioSleep(timeout: Timeout): Promise<void>

export type TouchPhase =
  | { type: 'Started' }
  | { type: 'Moved' }
  | { type: 'Ended' }
  | { type: 'Cancelled' }

export declare const enum UserAttentionType {
  Critical = 'Critical',
  Informational = 'Informational'
}

export type WindowEvent =
  | { type: 'ActivationTokenDone', serial: AsyncRequestSerial, token: ActivationToken }
  | { type: 'Resized', size: Size }
  | { type: 'Moved', position: Position }
  | { type: 'CloseRequested' }
  | { type: 'Destroyed' }
  | { type: 'DroppedFile', path: string }
  | { type: 'HoveredFile', path: string }
  | { type: 'HoveredFileCancelled' }
  | { type: 'Focused', field0: boolean }
  | { type: 'KeyboardInput', deviceId: DeviceId, event: KeyEvent, isSynthetic: boolean }
  | { type: 'ModifiersChanged', modifiers: Modifiers }
  | { type: 'Ime', ime: Ime }
  | { type: 'CursorMoved', deviceId: DeviceId, position: Position }
  | { type: 'CursorEntered', deviceId: DeviceId }
  | { type: 'CursorLeft', deviceId: DeviceId }
  | { type: 'MouseWheel', deviceId: DeviceId, delta: MouseScrollDelta, phase: TouchPhase }
  | { type: 'MouseInput', deviceId: DeviceId, state: ElementState, button: MouseButton }
  | { type: 'PinchGesture', deviceId: DeviceId, delta: number, phase: TouchPhase }
  | { type: 'PanGesture', deviceId: DeviceId, delta: Position, phase: TouchPhase }
  | { type: 'DoubleTapGesture', deviceId: DeviceId }
  | { type: 'RotationGesture', deviceId: DeviceId, delta: number, phase: TouchPhase }
  | { type: 'TouchpadPressure', deviceId: DeviceId, pressure: number, stage: number }
  | { type: 'AxisMotion', deviceId: DeviceId, axis: number, value: number }
  | { type: 'Touch', touch: Touch }
  | { type: 'ScaleFactorChanged', scaleFactor: number, innerSizeWriter: InnerSizeWriter }
  | { type: 'ThemeChanged', theme: Theme }
  | { type: 'Occluded', occluded: boolean }
  | { type: 'RedrawRequested' }

export declare const enum WindowLevel {
  AlwaysOnBottom = 'AlwaysOnBottom',
  Normal = 'Normal',
  AlwaysOnTop = 'AlwaysOnTop'
}
