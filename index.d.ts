/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum UnitType {
  Physical = 0,
  Logical = 1
}
export interface Position {
  type: UnitType
  x: number
  y: number
}
export interface Size {
  type: UnitType
  width: number
  height: number
}
export interface PixelUnit {
  type: UnitType
  count: number
}
export const enum EventType {
  NewEvents = 0,
  WindowEvent = 1,
  DeviceEvent = 2,
  UserEvent = 3,
  Suspended = 4,
  Resumed = 5,
  AboutToWait = 6,
  LoopExiting = 7,
  MemoryWarning = 8
}
export const enum StartCauseType {
  ResumeTimeReached = 0,
  WaitCancelled = 1,
  Poll = 2,
  Init = 3
}
export const enum WindowEventType {
  ActivationTokenDone = 0,
  Resized = 1,
  Moved = 2,
  CloseRequested = 3,
  Destroyed = 4,
  DroppedFile = 5,
  HoveredFile = 6,
  HoveredFileCancelled = 7,
  Focused = 8,
  KeyboardInput = 9,
  ModifiersChanged = 10,
  Ime = 11,
  CursorMoved = 12,
  CursorEntered = 13,
  CursorLeft = 14,
  MouseWheel = 15,
  MouseInput = 16,
  PinchGesture = 17,
  PanGesture = 18,
  DoubleTapGesture = 19,
  RotationGesture = 20,
  TouchpadPressure = 21,
  AxisMotion = 22,
  Touch = 23,
  ScaleFactorChanged = 24,
  ThemeChanged = 25,
  Occluded = 26,
  RedrawRequested = 27
}
export const enum Fullscreen {
  Exclusive = 0,
  Borderless = 1
}
export const enum WindowLevel {
  AlwaysOnBottom = 0,
  Normal = 1,
  AlwaysOnTop = 2
}
export const enum Theme {
  Light = 0,
  Dark = 1
}
export const enum CursorIcon {
  Default = 0,
  ContextMenu = 1,
  Help = 2,
  Pointer = 3,
  Progress = 4,
  Wait = 5,
  Cell = 6,
  Crosshair = 7,
  Text = 8,
  VerticalText = 9,
  Alias = 10,
  Copy = 11,
  Move = 12,
  NoDrop = 13,
  NotAllowed = 14,
  Grab = 15,
  Grabbing = 16,
  EResize = 17,
  NResize = 18,
  NeResize = 19,
  NwResize = 20,
  SResize = 21,
  SeResize = 22,
  SwResize = 23,
  WResize = 24,
  EwResize = 25,
  NsResize = 26,
  NeswResize = 27,
  NwseResize = 28,
  ColResize = 29,
  RowResize = 30,
  AllScroll = 31,
  ZoomIn = 32,
  ZoomOut = 33
}
export declare function sum(a: number, b: number): number
export declare class TimeDuration {
  t_secs: number
  t_nanos: number
}
export declare class EventLoop {
  constructor()
}
export declare class Event {
  get type(): EventType
  get startCause(): StartCause
}
export declare class StartCause {
  get type(): StartCauseType
  get start(): TimeDuration
  get requestedResume(): TimeDuration | null
}
export declare class WindowPayload { }
export declare class DevicePayload { }
export declare class WindowId { }
export declare class WindowEvent { }
export declare class WindowAttributes {
  constructor()
  withInnerSize(this: object, size: Size): this
  withMinInnerSize(this: object, minSize: Size): this
  withMaxInnerSize(this: object, maxSize: Size): this
  withPosition(this: object, position: Position): this
  withResizable(this: object, resizable: boolean): this
  withEnabledButtons(this: object, buttons: WindowButtons): this
  withTitle(this: object, title: string): this
  withFullscreen(this: object, fullscreen?: Fullscreen | undefined | null): this
  withMaximized(this: object, maximized: boolean): this
  withVisible(this: object, visible: boolean): this
  withTransparent(this: object, transparent: boolean): this
  get transparent(): boolean
  withBlur(this: object, blur: boolean): this
  withDecorations(this: object, decorations: boolean): this
  withWindowLevel(this: object, level: WindowLevel): this
  withTheme(this: object, theme?: Theme | undefined | null): this
  withResizeIncrements(this: object, resizeIncrements: Size): this
  withContentProtected(this: object, protected: boolean): this
  withActive(this: object, active: boolean): this
}
export declare class WindowButtons {
  static all(): WindowButtons
  static empty(): WindowButtons
  toggleClose(this: object): this
  toggleMinimize(this: object): this
  toggleMaximize(this: object): this
  insertClose(this: object): this
  insertMinimize(this: object): this
  insertMaximize(this: object): this
  removeClose(this: object): this
  removeMinimize(this: object): this
  removeMaximize(this: object): this
}
export declare class Icon {
  static fromRgba(rgba: Uint8Array, width: number, height: number): Icon
}
export declare class Cursor {
  static fromIcon(icon: CursorIcon): Cursor
}
