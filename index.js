/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'napi-winit.android-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.android-arm64.node')
          } else {
            nativeBinding = require('napi-winit-android-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'napi-winit.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.android-arm-eabi.node')
          } else {
            nativeBinding = require('napi-winit-android-arm-eabi')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'napi-winit.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.win32-x64-msvc.node')
          } else {
            nativeBinding = require('napi-winit-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'napi-winit.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.win32-ia32-msvc.node')
          } else {
            nativeBinding = require('napi-winit-win32-ia32-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'napi-winit.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.win32-arm64-msvc.node')
          } else {
            nativeBinding = require('napi-winit-win32-arm64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'napi-winit.darwin-universal.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./napi-winit.darwin-universal.node')
      } else {
        nativeBinding = require('napi-winit-darwin-universal')
      }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'napi-winit.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.darwin-x64.node')
          } else {
            nativeBinding = require('napi-winit-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'napi-winit.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.darwin-arm64.node')
          } else {
            nativeBinding = require('napi-winit-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    localFileExisted = existsSync(join(__dirname, 'napi-winit.freebsd-x64.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./napi-winit.freebsd-x64.node')
      } else {
        nativeBinding = require('napi-winit-freebsd-x64')
      }
    } catch (e) {
      loadError = e
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-x64-musl.node')
            } else {
              nativeBinding = require('napi-winit-linux-x64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-x64-gnu.node')
            } else {
              nativeBinding = require('napi-winit-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-arm64-musl.node')
            } else {
              nativeBinding = require('napi-winit-linux-arm64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-arm64-gnu.node')
            } else {
              nativeBinding = require('napi-winit-linux-arm64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-arm-musleabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-arm-musleabihf.node')
            } else {
              nativeBinding = require('napi-winit-linux-arm-musleabihf')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-arm-gnueabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-arm-gnueabihf.node')
            } else {
              nativeBinding = require('napi-winit-linux-arm-gnueabihf')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-riscv64-musl.node')
            } else {
              nativeBinding = require('napi-winit-linux-riscv64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'napi-winit.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./napi-winit.linux-riscv64-gnu.node')
            } else {
              nativeBinding = require('napi-winit-linux-riscv64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 's390x':
        localFileExisted = existsSync(
          join(__dirname, 'napi-winit.linux-s390x-gnu.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./napi-winit.linux-s390x-gnu.node')
          } else {
            nativeBinding = require('napi-winit-linux-s390x-gnu')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

const { UnitType, TimeDuration, EventLoop, ActiveEventLoop, DeviceEvents, ControlFlowEnum, ControlFlowWaitUntilSpec, ControlFlow, OwnedDisplayHandle, AsyncRequestSerial, UserPayload, EventEnum, EventNewEventsSpec, EventWindowEventSpec, EventDeviceEventSpec, EventUserEventSpec, Event, StartCauseEnum, StartCauseResumeTimeReachedSpec, StartCauseWaitCancelledSpec, StartCause, WindowEventEnum, WindowEventActivationTokenDoneSpec, WindowEventResizedSpec, WindowEventMovedSpec, WindowEventDroppedFileSpec, WindowEventHoveredFileSpec, WindowEventFocusedSpec, WindowEventKeyboardInputSpec, WindowEventModifiersChangedSpec, WindowEventImeSpec, WindowEventCursorMovedSpec, WindowEventCursorEnteredSpec, WindowEventCursorLeftSpec, WindowEventMouseWheelSpec, WindowEventMouseInputSpec, WindowEventPinchGestureSpec, WindowEventPanGestureSpec, WindowEventDoubleTapGestureSpec, WindowEventRotationGestureSpec, WindowEventTouchpadPressureSpec, WindowEventAxisMotionSpec, WindowEventTouchSpec, WindowEventScaleFactorChangedSpec, WindowEventThemeChangedSpec, WindowEventOccludedSpec, WindowEvent, DeviceId, RawKeyEvent, KeyEvent, Modifiers, ImeEnum, ImePreeditSpec, ImeCommitSpec, Ime, MouseButtonEnum, MouseButtonOtherSpec, MouseButton, MouseScrollDeltaType, MouseScrollDelta, InnerSizeWriter, TouchPhaseEnum, TouchPhase, Touch, DeviceEventEnum, DeviceEventMouseMotionSpec, DeviceEventMouseWheelSpec, DeviceEventMotionSpec, DeviceEventButtonSpec, DeviceEventKeySpec, DeviceEvent, ElementState, WindowAttributes, Fullscreen, WindowButtons, WindowLevel, Theme, Icon, WindowId, ActivationToken, Window, ImePurpose, UserAttentionType, CursorGrabMode, ResizeDirection, CursorIcon, Cursor, CustomCursor, CustomCursorSource, NativeKeyCodeEnum, NativeKeyCodeAndroidSpec, NativeKeyCodeMacOsSpec, NativeKeyCodeWindowsSpec, NativeKeyCodeXkbSpec, NativeKeyCode, NativeKeyEnum, NativeKeyAndroidSpec, NativeKeyMacOsSpec, NativeKeyWindowsSpec, NativeKeyXkbSpec, NativeKeyWebSpec, NativeKey, KeyEnum, KeyNamedSpec, KeyCharacterSpec, KeyUnidentifiedSpec, KeyDeadSpec, Key, PhysicalKeyEnum, PhysicalKeyCodeSpec, PhysicalKeyUnidentifiedSpec, PhysicalKey, KeyCode, NamedKey, KeyLocation, ModifiersState, ModifiersKeyState, VideoModeHandle, MonitorHandle, threadSleep, tokioSleep, PumpStatus } = nativeBinding

module.exports.UnitType = UnitType
module.exports.TimeDuration = TimeDuration
module.exports.EventLoop = EventLoop
module.exports.ActiveEventLoop = ActiveEventLoop
module.exports.DeviceEvents = DeviceEvents
module.exports.ControlFlowEnum = ControlFlowEnum
module.exports.ControlFlowWaitUntilSpec = ControlFlowWaitUntilSpec
module.exports.ControlFlow = ControlFlow
module.exports.OwnedDisplayHandle = OwnedDisplayHandle
module.exports.AsyncRequestSerial = AsyncRequestSerial
module.exports.UserPayload = UserPayload
module.exports.EventEnum = EventEnum
module.exports.EventNewEventsSpec = EventNewEventsSpec
module.exports.EventWindowEventSpec = EventWindowEventSpec
module.exports.EventDeviceEventSpec = EventDeviceEventSpec
module.exports.EventUserEventSpec = EventUserEventSpec
module.exports.Event = Event
module.exports.StartCauseEnum = StartCauseEnum
module.exports.StartCauseResumeTimeReachedSpec = StartCauseResumeTimeReachedSpec
module.exports.StartCauseWaitCancelledSpec = StartCauseWaitCancelledSpec
module.exports.StartCause = StartCause
module.exports.WindowEventEnum = WindowEventEnum
module.exports.WindowEventActivationTokenDoneSpec = WindowEventActivationTokenDoneSpec
module.exports.WindowEventResizedSpec = WindowEventResizedSpec
module.exports.WindowEventMovedSpec = WindowEventMovedSpec
module.exports.WindowEventDroppedFileSpec = WindowEventDroppedFileSpec
module.exports.WindowEventHoveredFileSpec = WindowEventHoveredFileSpec
module.exports.WindowEventFocusedSpec = WindowEventFocusedSpec
module.exports.WindowEventKeyboardInputSpec = WindowEventKeyboardInputSpec
module.exports.WindowEventModifiersChangedSpec = WindowEventModifiersChangedSpec
module.exports.WindowEventImeSpec = WindowEventImeSpec
module.exports.WindowEventCursorMovedSpec = WindowEventCursorMovedSpec
module.exports.WindowEventCursorEnteredSpec = WindowEventCursorEnteredSpec
module.exports.WindowEventCursorLeftSpec = WindowEventCursorLeftSpec
module.exports.WindowEventMouseWheelSpec = WindowEventMouseWheelSpec
module.exports.WindowEventMouseInputSpec = WindowEventMouseInputSpec
module.exports.WindowEventPinchGestureSpec = WindowEventPinchGestureSpec
module.exports.WindowEventPanGestureSpec = WindowEventPanGestureSpec
module.exports.WindowEventDoubleTapGestureSpec = WindowEventDoubleTapGestureSpec
module.exports.WindowEventRotationGestureSpec = WindowEventRotationGestureSpec
module.exports.WindowEventTouchpadPressureSpec = WindowEventTouchpadPressureSpec
module.exports.WindowEventAxisMotionSpec = WindowEventAxisMotionSpec
module.exports.WindowEventTouchSpec = WindowEventTouchSpec
module.exports.WindowEventScaleFactorChangedSpec = WindowEventScaleFactorChangedSpec
module.exports.WindowEventThemeChangedSpec = WindowEventThemeChangedSpec
module.exports.WindowEventOccludedSpec = WindowEventOccludedSpec
module.exports.WindowEvent = WindowEvent
module.exports.DeviceId = DeviceId
module.exports.RawKeyEvent = RawKeyEvent
module.exports.KeyEvent = KeyEvent
module.exports.Modifiers = Modifiers
module.exports.ImeEnum = ImeEnum
module.exports.ImePreeditSpec = ImePreeditSpec
module.exports.ImeCommitSpec = ImeCommitSpec
module.exports.Ime = Ime
module.exports.MouseButtonEnum = MouseButtonEnum
module.exports.MouseButtonOtherSpec = MouseButtonOtherSpec
module.exports.MouseButton = MouseButton
module.exports.MouseScrollDeltaType = MouseScrollDeltaType
module.exports.MouseScrollDelta = MouseScrollDelta
module.exports.InnerSizeWriter = InnerSizeWriter
module.exports.TouchPhaseEnum = TouchPhaseEnum
module.exports.TouchPhase = TouchPhase
module.exports.Touch = Touch
module.exports.DeviceEventEnum = DeviceEventEnum
module.exports.DeviceEventMouseMotionSpec = DeviceEventMouseMotionSpec
module.exports.DeviceEventMouseWheelSpec = DeviceEventMouseWheelSpec
module.exports.DeviceEventMotionSpec = DeviceEventMotionSpec
module.exports.DeviceEventButtonSpec = DeviceEventButtonSpec
module.exports.DeviceEventKeySpec = DeviceEventKeySpec
module.exports.DeviceEvent = DeviceEvent
module.exports.ElementState = ElementState
module.exports.WindowAttributes = WindowAttributes
module.exports.Fullscreen = Fullscreen
module.exports.WindowButtons = WindowButtons
module.exports.WindowLevel = WindowLevel
module.exports.Theme = Theme
module.exports.Icon = Icon
module.exports.WindowId = WindowId
module.exports.ActivationToken = ActivationToken
module.exports.Window = Window
module.exports.ImePurpose = ImePurpose
module.exports.UserAttentionType = UserAttentionType
module.exports.CursorGrabMode = CursorGrabMode
module.exports.ResizeDirection = ResizeDirection
module.exports.CursorIcon = CursorIcon
module.exports.Cursor = Cursor
module.exports.CustomCursor = CustomCursor
module.exports.CustomCursorSource = CustomCursorSource
module.exports.NativeKeyCodeEnum = NativeKeyCodeEnum
module.exports.NativeKeyCodeAndroidSpec = NativeKeyCodeAndroidSpec
module.exports.NativeKeyCodeMacOsSpec = NativeKeyCodeMacOsSpec
module.exports.NativeKeyCodeWindowsSpec = NativeKeyCodeWindowsSpec
module.exports.NativeKeyCodeXkbSpec = NativeKeyCodeXkbSpec
module.exports.NativeKeyCode = NativeKeyCode
module.exports.NativeKeyEnum = NativeKeyEnum
module.exports.NativeKeyAndroidSpec = NativeKeyAndroidSpec
module.exports.NativeKeyMacOsSpec = NativeKeyMacOsSpec
module.exports.NativeKeyWindowsSpec = NativeKeyWindowsSpec
module.exports.NativeKeyXkbSpec = NativeKeyXkbSpec
module.exports.NativeKeyWebSpec = NativeKeyWebSpec
module.exports.NativeKey = NativeKey
module.exports.KeyEnum = KeyEnum
module.exports.KeyNamedSpec = KeyNamedSpec
module.exports.KeyCharacterSpec = KeyCharacterSpec
module.exports.KeyUnidentifiedSpec = KeyUnidentifiedSpec
module.exports.KeyDeadSpec = KeyDeadSpec
module.exports.Key = Key
module.exports.PhysicalKeyEnum = PhysicalKeyEnum
module.exports.PhysicalKeyCodeSpec = PhysicalKeyCodeSpec
module.exports.PhysicalKeyUnidentifiedSpec = PhysicalKeyUnidentifiedSpec
module.exports.PhysicalKey = PhysicalKey
module.exports.KeyCode = KeyCode
module.exports.NamedKey = NamedKey
module.exports.KeyLocation = KeyLocation
module.exports.ModifiersState = ModifiersState
module.exports.ModifiersKeyState = ModifiersKeyState
module.exports.VideoModeHandle = VideoModeHandle
module.exports.MonitorHandle = MonitorHandle
module.exports.threadSleep = threadSleep
module.exports.tokioSleep = tokioSleep
module.exports.PumpStatus = PumpStatus
